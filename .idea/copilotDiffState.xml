<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/accounts/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/accounts/views.py" />
              <option name="originalContent" value="from django.shortcuts import render, redirect&#10;from django.contrib.auth.models import User&#10;from django.contrib.auth import authenticate, login, logout&#10;from django.contrib import messages&#10;from django.contrib.auth.decorators import login_required&#10;from django.contrib.auth import update_session_auth_hash&#10;from .forms import UserProfileForm, CustomPasswordChangeForm, CustomRegistrationForm, CustomLoginForm&#10;from .models import UserProfile&#10;&#10;def register_view(request):&#10;    if request.method == 'POST':&#10;        form = CustomRegistrationForm(request.POST)&#10;        if form.is_valid():&#10;            email = form.cleaned_data['email']&#10;            password = form.cleaned_data['password']&#10;&#10;            # Buat username dari email (bagian sebelum @)&#10;            username = email.split('@')[0]&#10;&#10;            # Pastikan username unik&#10;            counter = 1&#10;            original_username = username&#10;            while User.objects.filter(username=username).exists():&#10;                username = f&quot;{original_username}{counter}&quot;&#10;                counter += 1&#10;&#10;            # Buat user baru&#10;            user = User.objects.create_user(&#10;                username=username,&#10;                email=email,&#10;                password=password&#10;            )&#10;&#10;            messages.success(request, &quot;Registrasi berhasil! Silakan login dengan email Anda.&quot;)&#10;            return redirect('login')&#10;    else:&#10;        form = CustomRegistrationForm()&#10;&#10;    return render(request, 'accounts/register.html', {'form': form})&#10;&#10;def login_view(request):&#10;    if request.method == 'POST':&#10;        form = CustomLoginForm(request.POST)&#10;        if form.is_valid():&#10;            email = form.cleaned_data['email']&#10;            password = form.cleaned_data['password']&#10;&#10;            # Gunakan email sebagai username untuk authenticate&#10;            user = authenticate(request, username=email, password=password)&#10;            if user is not None:&#10;                login(request, user)&#10;                return redirect('book_list')&#10;            else:&#10;                messages.error(request, &quot;Email atau password salah.&quot;)&#10;    else:&#10;        form = CustomLoginForm()&#10;&#10;    return render(request, 'accounts/login.html', {'form': form})&#10;&#10;def logout_view(request):&#10;    logout(request)&#10;    return redirect('login')&#10;&#10;@login_required&#10;def profile_view(request):&#10;    &quot;&quot;&quot;Menampilkan profil user&quot;&quot;&quot;&#10;    profile, created = UserProfile.objects.get_or_create(user=request.user)&#10;&#10;    # Hitung statistik untuk template&#10;    processed_books_count = request.user.book_set.filter(images_folder__isnull=False).count()&#10;&#10;    return render(request, 'accounts/profile.html', {&#10;        'profile': profile,&#10;        'processed_books_count': processed_books_count&#10;    })&#10;&#10;@login_required&#10;def profile_edit(request):&#10;    &quot;&quot;&quot;Edit profil user&quot;&quot;&quot;&#10;    profile, created = UserProfile.objects.get_or_create(user=request.user)&#10;&#10;    if request.method == 'POST':&#10;        form = UserProfileForm(request.POST, request.FILES, instance=profile)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, 'Profil berhasil diperbarui!')&#10;            return redirect('profile')&#10;    else:&#10;        form = UserProfileForm(instance=profile)&#10;&#10;    return render(request, 'accounts/profile_edit.html', {'form': form})&#10;&#10;@login_required&#10;def change_password(request):&#10;    &quot;&quot;&quot;Ubah password user&quot;&quot;&quot;&#10;    if request.method == 'POST':&#10;        form = CustomPasswordChangeForm(request.user, request.POST)&#10;        if form.is_valid():&#10;            user = form.save()&#10;            # Update session agar user tidak logout setelah ganti password&#10;            update_session_auth_hash(request, user)&#10;            messages.success(request, 'Password berhasil diubah!')&#10;            return redirect('profile')&#10;        else:&#10;            messages.error(request, 'Terjadi kesalahan. Periksa form di bawah.')&#10;    else:&#10;        form = CustomPasswordChangeForm(request.user)&#10;&#10;    return render(request, 'accounts/change_password.html', {'form': form})&#10;" />
              <option name="updatedContent" value="from django.shortcuts import render, redirect&#10;from django.contrib.auth.models import User&#10;from django.contrib.auth import authenticate, login, logout&#10;from django.contrib import messages&#10;from django.contrib.auth.decorators import login_required&#10;from django.contrib.auth import update_session_auth_hash&#10;from .forms import UserProfileForm, CustomPasswordChangeForm, CustomRegistrationForm, CustomLoginForm&#10;from .models import UserProfile&#10;&#10;def register_view(request):&#10;    if request.method == 'POST':&#10;        form = CustomRegistrationForm(request.POST)&#10;        if form.is_valid():&#10;            email = form.cleaned_data['email']&#10;            password = form.cleaned_data['password']&#10;&#10;            # Buat username dari email (bagian sebelum @)&#10;            username = email.split('@')[0]&#10;&#10;            # Pastikan username unik&#10;            counter = 1&#10;            original_username = username&#10;            while User.objects.filter(username=username).exists():&#10;                username = f&quot;{original_username}{counter}&quot;&#10;                counter += 1&#10;&#10;            # Buat user baru&#10;            user = User.objects.create_user(&#10;                username=username,&#10;                email=email,&#10;                password=password&#10;            )&#10;&#10;            messages.success(request, &quot;Registrasi berhasil! Silakan login dengan email Anda.&quot;)&#10;            return redirect('login')&#10;    else:&#10;        form = CustomRegistrationForm()&#10;&#10;    return render(request, 'accounts/register.html', {'form': form})&#10;&#10;def login_view(request):&#10;    if request.method == 'POST':&#10;        form = CustomLoginForm(request.POST)&#10;        if form.is_valid():&#10;            email = form.cleaned_data['email']&#10;            password = form.cleaned_data['password']&#10;&#10;            # Gunakan email sebagai username untuk authenticate&#10;            user = authenticate(request, username=email, password=password)&#10;            if user is not None:&#10;                login(request, user)&#10;                return redirect('book_list')&#10;            else:&#10;                messages.error(request, &quot;Email atau password salah.&quot;)&#10;    else:&#10;        form = CustomLoginForm()&#10;&#10;    return render(request, 'accounts/login.html', {'form': form})&#10;&#10;def logout_view(request):&#10;    logout(request)&#10;    return redirect('login')&#10;&#10;@login_required&#10;def profile_view(request):&#10;    &quot;&quot;&quot;Menampilkan profil user&quot;&quot;&quot;&#10;    profile, created = UserProfile.objects.get_or_create(user=request.user)&#10;&#10;    # Hitung statistik untuk template&#10;    processed_books_count = request.user.book_set.filter(images_folder__isnull=False).count()&#10;&#10;    return render(request, 'accounts/profile.html', {&#10;        'profile': profile,&#10;        'processed_books_count': processed_books_count&#10;    })&#10;&#10;@login_required&#10;def profile_edit(request):&#10;    &quot;&quot;&quot;Edit profil user&quot;&quot;&quot;&#10;    profile, created = UserProfile.objects.get_or_create(user=request.user)&#10;&#10;    if request.method == 'POST':&#10;        form = UserProfileForm(request.POST, request.FILES, instance=profile)&#10;        if form.is_valid():&#10;            form.save()&#10;            # Redirect dengan parameter notifikasi untuk toast&#10;            return redirect('/accounts/profile/?updated=profile')&#10;    else:&#10;        form = UserProfileForm(instance=profile)&#10;&#10;    return render(request, 'accounts/profile_edit.html', {'form': form})&#10;&#10;@login_required&#10;def change_password(request):&#10;    &quot;&quot;&quot;Ubah password user&quot;&quot;&quot;&#10;    if request.method == 'POST':&#10;        form = CustomPasswordChangeForm(request.user, request.POST)&#10;        if form.is_valid():&#10;            user = form.save()&#10;            # Update session agar user tidak logout setelah ganti password&#10;            update_session_auth_hash(request, user)&#10;            # Redirect dengan parameter notifikasi untuk toast&#10;            return redirect('/accounts/profile/?updated=password')&#10;        else:&#10;            messages.error(request, 'Terjadi kesalahan. Periksa form di bawah.')&#10;    else:&#10;        form = CustomPasswordChangeForm(request.user)&#10;&#10;    return render(request, 'accounts/change_password.html', {'form': form})" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/library/templatetags/library_filters.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/library/templatetags/library_filters.py" />
              <option name="updatedContent" value="from django import template&#10;&#10;register = template.Library()&#10;&#10;@register.filter&#10;def split(value, separator):&#10;    &quot;&quot;&quot;Split string by separator&quot;&quot;&quot;&#10;    if value:&#10;        return [item.strip() for item in value.split(separator) if item.strip()]&#10;    return []" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/library/urls.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/library/urls.py" />
              <option name="originalContent" value="from django.urls import path&#10;from . import views&#10;&#10;urlpatterns = [&#10;    path('', views.book_list, name='book_list'),&#10;    path('add/', views.book_create, name='book_create'),&#10;    path('&lt;int:pk&gt;/', views.book_detail, name='book_detail'),&#10;    path('&lt;int:pk&gt;/preview/', views.book_preview, name='book_preview'),&#10;    path('&lt;int:pk&gt;/reprocess/', views.reprocess_book, name='reprocess_book'),&#10;    path('&lt;int:pk&gt;/toggle-favorite/', views.toggle_favorite, name='toggle_favorite'),&#10;    path('edit/&lt;int:pk&gt;/', views.book_update, name='book_update'),&#10;    path('delete/&lt;int:pk&gt;/', views.book_delete, name='book_delete'),&#10;]&#10;" />
              <option name="updatedContent" value="from django.urls import path&#10;from . import views&#10;&#10;urlpatterns = [&#10;    path('', views.book_list, name='book_list'),&#10;    path('add/', views.book_create, name='book_create'),&#10;    path('&lt;int:pk&gt;/', views.book_detail, name='book_detail'),&#10;    path('&lt;int:pk&gt;/preview/', views.book_preview, name='book_preview'),&#10;    path('&lt;int:pk&gt;/reprocess/', views.reprocess_book, name='reprocess_book'),&#10;    path('&lt;int:pk&gt;/analyze/', views.analyze_book, name='analyze_book'),&#10;    path('&lt;int:pk&gt;/toggle-favorite/', views.toggle_favorite, name='toggle_favorite'),&#10;    path('edit/&lt;int:pk&gt;/', views.book_update, name='book_update'),&#10;    path('delete/&lt;int:pk&gt;/', views.book_delete, name='book_delete'),&#10;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/library/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/library/views.py" />
              <option name="originalContent" value="from django.shortcuts import render, redirect, get_object_or_404&#10;from django.contrib.auth.decorators import login_required&#10;from .models import Book, Favorite&#10;from .forms import BookForm&#10;from django.db.models import Q&#10;from django.contrib import messages&#10;from django.core.paginator import Paginator&#10;from .utils import convert_pdf_to_images, get_book_page_count, get_book_cover_from_pdf&#10;import os&#10;from django.conf import settings&#10;from django.http import JsonResponse&#10;from django.views.decorators.http import require_http_methods&#10;&#10;def book_list(request):&#10;    query = request.GET.get('q')&#10;    genre = request.GET.get('genre')&#10;    favorite = request.GET.get('favorite')&#10;&#10;    books = Book.objects.all().order_by('-created_at')  # Tambahkan ordering&#10;&#10;    if query:&#10;        books = books.filter(&#10;            Q(title__icontains=query) |&#10;            Q(author__icontains=query) |&#10;            Q(description__icontains=query) |&#10;            Q(year__icontains=query)&#10;        )&#10;&#10;    if genre:&#10;        books = books.filter(genre=genre)&#10;&#10;    if favorite == '1':&#10;        # Filter hanya buku yang difavoritkan oleh user saat ini&#10;        books = books.filter(favorite__user=request.user)&#10;&#10;    # Tambahkan pagination&#10;    paginator = Paginator(books, 5)  # 5 buku per halaman&#10;    page_number = request.GET.get('page')&#10;    page_obj = paginator.get_page(page_number)&#10;&#10;    # Get list favorit user untuk template&#10;    user_favorites = []&#10;    if request.user.is_authenticated:&#10;        user_favorites = list(request.user.favorite_set.values_list('book_id', flat=True))&#10;&#10;    return render(request, 'library/book_list.html', {&#10;        'books': page_obj,&#10;        'query': query,&#10;        'page_obj': page_obj,&#10;        'user_favorites': user_favorites&#10;    })&#10;&#10;@login_required&#10;def book_create(request):&#10;    if request.method == 'POST':&#10;        form = BookForm(request.POST, request.FILES)&#10;        if form.is_valid():&#10;            book = form.save(commit=False)&#10;            book.uploader = request.user&#10;            book.save()&#10;&#10;            # Proses konversi PDF ke gambar jika ada file PDF&#10;            if book.file and book.file.name.endswith('.pdf'):&#10;                try:&#10;                    # Konversi PDF ke gambar&#10;                    pdf_path = book.file.path&#10;                    images_folder = convert_pdf_to_images(pdf_path, book.id)&#10;&#10;                    if images_folder:&#10;                        book.images_folder = images_folder&#10;&#10;                    # Dapatkan jumlah halaman&#10;                    page_count = get_book_page_count(pdf_path)&#10;                    if page_count &gt; 0:&#10;                        book.pages = page_count&#10;&#10;                    # Generate cover dari halaman pertama PDF&#10;                    if not book.cover:&#10;                        cover_path = get_book_cover_from_pdf(pdf_path, book.id)&#10;                        if cover_path:&#10;                            book.cover = cover_path&#10;&#10;                    # Analisis otomatis untuk mendapatkan kata-kata relevan&#10;                    try:&#10;                        from .utils import analyze_book_text&#10;                        keywords = analyze_book_text(pdf_path, max_keywords=5)&#10;                        if keywords:&#10;                            book.keywords = ', '.join(keywords)&#10;                    except Exception as e:&#10;                        pass&#10;&#10;                    book.save()&#10;&#10;                except Exception as e:&#10;                    pass&#10;&#10;            return redirect('book_list')&#10;    else:&#10;        form = BookForm()&#10;    return render(request, 'library/book_form.html', {'form': form, 'title': 'Upload Buku'})&#10;&#10;&#10;@login_required&#10;def book_update(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;    # cek user atau staff&#10;    if not (request.user.is_staff or book.uploader == request.user):&#10;        messages.error(request, &quot;Kamu tidak memiliki izin untuk mengedit buku ini.&quot;)&#10;        return redirect('book_list')&#10;&#10;    if request.method == 'POST':&#10;        from .forms import BookEditForm&#10;        form = BookEditForm(request.POST, request.FILES, instance=book)&#10;        if form.is_valid():&#10;            # Simpan data lama untuk perbandingan&#10;            old_file = book.file&#10;&#10;            # Simpan form&#10;            updated_book = form.save()&#10;&#10;            # Cek apakah file PDF berubah&#10;            if 'file' in request.FILES and request.FILES['file'] != old_file:&#10;                # File berubah, perlu diproses ulang&#10;                # Hapus folder gambar lama jika ada&#10;                if updated_book.images_folder:&#10;                    import shutil&#10;                    import os&#10;                    from django.conf import settings&#10;&#10;                    old_folder_path = os.path.join(settings.MEDIA_ROOT, updated_book.images_folder)&#10;                    if os.path.exists(old_folder_path):&#10;                        shutil.rmtree(old_folder_path)&#10;&#10;                # Reset data terkait pemrosesan&#10;                updated_book.images_folder = None&#10;                updated_book.pages = None&#10;                updated_book.cover = None&#10;                updated_book.keywords = None&#10;                updated_book.save()&#10;&#10;                # Proses file PDF baru menggunakan fungsi yang tersedia&#10;                try:&#10;                    pdf_path = updated_book.file.path&#10;&#10;                    # Konversi PDF ke gambar&#10;                    images_folder = convert_pdf_to_images(pdf_path, updated_book.id)&#10;                    if images_folder:&#10;                        updated_book.images_folder = images_folder&#10;&#10;                    # Dapatkan jumlah halaman&#10;                    page_count = get_book_page_count(pdf_path)&#10;                    if page_count &gt; 0:&#10;                        updated_book.pages = page_count&#10;&#10;                    # Generate cover dari halaman pertama PDF&#10;                    cover_path = get_book_cover_from_pdf(pdf_path, updated_book.id)&#10;                    if cover_path:&#10;                        updated_book.cover = cover_path&#10;&#10;                    # Analisis otomatis untuk mendapatkan kata-kata relevan&#10;                    try:&#10;                        from .utils import analyze_book_text&#10;                        keywords = analyze_book_text(pdf_path, max_keywords=5)&#10;                        if keywords:&#10;                            updated_book.keywords = ', '.join(keywords)&#10;                    except Exception as e:&#10;                        pass&#10;&#10;                    updated_book.save()&#10;&#10;                except Exception as e:&#10;                    pass&#10;&#10;            return redirect('book_list')&#10;    else:&#10;        from .forms import BookEditForm&#10;        form = BookEditForm(instance=book)&#10;&#10;    return render(request, 'library/book_form.html', {&#10;        'form': form,&#10;        'title': 'Edit Buku',&#10;        'book': book,&#10;        'is_edit': True&#10;    })&#10;&#10;&#10;@login_required&#10;def book_delete(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;    if not (request.user.is_staff or book.uploader == request.user):&#10;        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':&#10;            return JsonResponse({'success': False, 'message': 'Kamu tidak memiliki izin untuk menghapus buku ini.'})&#10;        messages.error(request, &quot;Kamu tidak memiliki izin untuk menghapus buku ini.&quot;)&#10;        return redirect('book_list')&#10;&#10;    if request.method == 'POST' or request.method == 'DELETE':&#10;        try:&#10;            book_title = book.title&#10;            book.delete()&#10;&#10;            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':&#10;                return JsonResponse({'success': True, 'message': f'Buku &quot;{book_title}&quot; berhasil dihapus.'})&#10;&#10;            messages.success(request, f'Buku &quot;{book_title}&quot; berhasil dihapus.')&#10;            return redirect('book_list')&#10;        except Exception as e:&#10;            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':&#10;                return JsonResponse({'success': False, 'message': 'Terjadi kesalahan saat menghapus buku.'})&#10;&#10;            messages.error(request, 'Terjadi kesalahan saat menghapus buku.')&#10;            return redirect('book_detail', pk=pk)&#10;&#10;    # Jika GET request (untuk form konfirmasi)&#10;    return render(request, 'library/book_confirm_delete.html', {'book': book})&#10;&#10;def book_detail(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;    # Check apakah buku ini sudah difavoritkan oleh user&#10;    is_favorited = False&#10;    if request.user.is_authenticated:&#10;        from .models import Favorite&#10;        is_favorited = Favorite.objects.filter(user=request.user, book=book).exists()&#10;&#10;    return render(request, 'library/book_detail.html', {&#10;        'book': book,&#10;        'is_favorited': is_favorited&#10;    })&#10;&#10;def book_preview(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    # Pastikan buku memiliki images folder&#10;    if not book.images_folder:&#10;        messages.error(request, &quot;Buku ini belum dikonversi ke gambar.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    # Get page number dari URL parameter&#10;    page_num = request.GET.get('page', 1)&#10;    try:&#10;        page_num = int(page_num)&#10;    except ValueError:&#10;        page_num = 1&#10;&#10;    # Pastikan page number valid&#10;    if page_num &lt; 1:&#10;        page_num = 1&#10;    elif book.pages and page_num &gt; book.pages:&#10;        page_num = book.pages&#10;&#10;    # Buat path ke gambar halaman&#10;    image_filename = f&quot;page_{page_num:03d}.png&quot;&#10;    image_path = f&quot;{book.images_folder}/{image_filename}&quot;&#10;&#10;    # Check apakah file gambar ada&#10;    full_image_path = os.path.join(settings.MEDIA_ROOT, image_path)&#10;    if not os.path.exists(full_image_path):&#10;        messages.error(request, f&quot;Halaman {page_num} tidak ditemukan.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    context = {&#10;        'book': book,&#10;        'current_page': page_num,&#10;        'total_pages': book.pages or 1,&#10;        'image_url': f&quot;{settings.MEDIA_URL}{image_path}&quot;,&#10;        'has_previous': page_num &gt; 1,&#10;        'has_next': page_num &lt; (book.pages or 1),&#10;        'previous_page': page_num - 1 if page_num &gt; 1 else None,&#10;        'next_page': page_num + 1 if page_num &lt; (book.pages or 1) else None,&#10;    }&#10;&#10;    return render(request, 'library/book_preview.html', context)&#10;&#10;@login_required&#10;@require_http_methods([&quot;POST&quot;])&#10;def toggle_favorite(request, pk):&#10;    &quot;&quot;&quot;Toggle favorite status untuk buku via AJAX&quot;&quot;&quot;&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    try:&#10;        # Coba cari existing favorite&#10;        favorite = Favorite.objects.get(user=request.user, book=book)&#10;        # Jika ada, hapus (unfavorite)&#10;        favorite.delete()&#10;        is_favorited = False&#10;        message = &quot;Buku dihapus dari favorit&quot;&#10;    except Favorite.DoesNotExist:&#10;        # Jika tidak ada, tambah (favorite)&#10;        Favorite.objects.create(user=request.user, book=book)&#10;        is_favorited = True&#10;        message = &quot;Buku ditambahkan ke favorit&quot;&#10;&#10;    # Return JSON response untuk AJAX&#10;    return JsonResponse({&#10;        'success': True,&#10;        'is_favorited': is_favorited,&#10;        'message': message,&#10;        'favorites_count': request.user.favorite_set.count()&#10;    })&#10;&#10;@login_required&#10;def reprocess_book(request, pk):&#10;    &quot;&quot;&quot;&#10;    Konversi ulang buku yang belum memiliki gambar&#10;    &quot;&quot;&quot;&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    # Cek permission&#10;    if not (request.user.is_staff or book.uploader == request.user):&#10;        messages.error(request, &quot;Kamu tidak memiliki izin untuk memproses ulang buku ini.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    # Proses konversi PDF ke gambar jika ada file PDF&#10;    if book.file and book.file.name.endswith('.pdf'):&#10;        try:&#10;            # Konversi PDF ke gambar&#10;            pdf_path = book.file.path&#10;            images_folder = convert_pdf_to_images(pdf_path, book.id)&#10;&#10;            if images_folder:&#10;                book.images_folder = images_folder&#10;&#10;            # Dapatkan jumlah halaman&#10;            page_count = get_book_page_count(pdf_path)&#10;            if page_count &gt; 0:&#10;                book.pages = page_count&#10;&#10;            # Generate cover dari halaman pertama PDF jika belum ada cover&#10;            if not book.cover:&#10;                cover_path = get_book_cover_from_pdf(pdf_path, book.id)&#10;                if cover_path:&#10;                    book.cover = cover_path&#10;&#10;            # Analisis otomatis jika belum ada keywords&#10;            if not book.keywords:&#10;                try:&#10;                    from .utils import analyze_book_text&#10;                    keywords = analyze_book_text(pdf_path, max_keywords=5)  # Batasi jadi 5 kata&#10;                    if keywords:&#10;                        book.keywords = ', '.join(keywords)&#10;                        print(f&quot;Debug: Auto-analysis completed during reprocess. Keywords: {book.keywords}&quot;)&#10;                except Exception as e:&#10;                    print(f&quot;Debug: Auto-analysis failed during reprocess: {str(e)}&quot;)&#10;&#10;            book.save()&#10;&#10;            success_msg = f'Buku berhasil diproses ulang ({page_count} halaman)'&#10;            if book.keywords:&#10;                success_msg += ' dengan kata kunci relevan'&#10;            messages.success(request, success_msg)&#10;&#10;        except Exception as e:&#10;            messages.error(request, f'Proses ulang buku gagal: {str(e)}')&#10;    else:&#10;        messages.error(request, 'File buku bukan PDF atau tidak ditemukan.')&#10;&#10;    return redirect('book_detail', pk=pk)&#10;&#10;@login_required&#10;def analyze_book(request, pk):&#10;    &quot;&quot;&quot;&#10;    Analisis teks buku untuk mendapatkan kata-kata relevan&#10;    &quot;&quot;&quot;&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    # Cek permission - hanya user yang login bisa menganalisis&#10;    if not request.user.is_authenticated:&#10;        if request.headers.get('Content-Type') == 'application/json':&#10;            return JsonResponse({'success': False, 'message': 'Anda harus login untuk menganalisis buku.'})&#10;        messages.error(request, &quot;Anda harus login untuk menganalisis buku.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    # Pastikan ada file PDF&#10;    if not (book.file and book.file.name.endswith('.pdf')):&#10;        if request.headers.get('Content-Type') == 'application/json':&#10;            return JsonResponse({'success': False, 'message': 'File buku bukan PDF atau tidak ditemukan.'})&#10;        messages.error(request, 'File buku bukan PDF atau tidak ditemukan.')&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    try:&#10;        # Import fungsi analisis&#10;        from .utils import analyze_book_text&#10;&#10;        # Analisis teks dari PDF&#10;        pdf_path = book.file.path&#10;        keywords = analyze_book_text(pdf_path, max_keywords=5)  # Batasi jadi 5 kata&#10;&#10;        if keywords:&#10;            # Simpan keywords ke database&#10;            book.keywords = ', '.join(keywords)&#10;            book.save()&#10;&#10;            # Return JSON response untuk AJAX request&#10;            if request.headers.get('Content-Type') == 'application/json':&#10;                return JsonResponse({&#10;                    'success': True,&#10;                    'message': f'Analisis berhasil! Ditemukan {len(keywords)} kata kunci relevan.',&#10;                    'keywords': keywords,&#10;                    'keywords_string': book.keywords&#10;                })&#10;&#10;            messages.success(request, f'Analisis berhasil! Ditemukan {len(keywords)} kata kunci relevan.')&#10;        else:&#10;            if request.headers.get('Content-Type') == 'application/json':&#10;                return JsonResponse({&#10;                    'success': False,&#10;                    'message': 'Tidak dapat mengekstrak kata kunci dari buku ini. Mungkin teks tidak dapat dibaca atau terlalu sedikit.'&#10;                })&#10;            messages.warning(request, 'Tidak dapat mengekstrak kata kunci dari buku ini. Mungkin teks tidak dapat dibaca atau terlalu sedikit.')&#10;&#10;    except Exception as e:&#10;        error_msg = f'Analisis gagal: {str(e)}'&#10;        print(f&quot;Debug: Analysis error = {str(e)}&quot;)&#10;&#10;        if request.headers.get('Content-Type') == 'application/json':&#10;            return JsonResponse({'success': False, 'message': error_msg})&#10;        messages.error(request, error_msg)&#10;&#10;    return redirect('book_detail', pk=pk)&#10;" />
              <option name="updatedContent" value="from django.shortcuts import render, redirect, get_object_or_404&#10;from django.contrib.auth.decorators import login_required&#10;from .models import Book, Favorite&#10;from .forms import BookForm&#10;from django.db.models import Q&#10;from django.contrib import messages&#10;from django.core.paginator import Paginator&#10;from .utils import convert_pdf_to_images, get_book_page_count, get_book_cover_from_pdf&#10;import os&#10;from django.conf import settings&#10;from django.http import JsonResponse&#10;from django.views.decorators.http import require_http_methods&#10;&#10;def book_list(request):&#10;    query = request.GET.get('q')&#10;    genre = request.GET.get('genre')&#10;    favorite = request.GET.get('favorite')&#10;&#10;    books = Book.objects.all().order_by('-created_at')  # Tambahkan ordering&#10;&#10;    if query:&#10;        books = books.filter(&#10;            Q(title__icontains=query) |&#10;            Q(author__icontains=query) |&#10;            Q(description__icontains=query) |&#10;            Q(year__icontains=query)&#10;        )&#10;&#10;    if genre:&#10;        books = books.filter(genre=genre)&#10;&#10;    if favorite == '1':&#10;        # Filter hanya buku yang difavoritkan oleh user saat ini&#10;        books = books.filter(favorite__user=request.user)&#10;&#10;    # Tambahkan pagination&#10;    paginator = Paginator(books, 5)  # 5 buku per halaman&#10;    page_number = request.GET.get('page')&#10;    page_obj = paginator.get_page(page_number)&#10;&#10;    # Get list favorit user untuk template&#10;    user_favorites = []&#10;    if request.user.is_authenticated:&#10;        user_favorites = list(request.user.favorite_set.values_list('book_id', flat=True))&#10;&#10;    return render(request, 'library/book_list.html', {&#10;        'books': page_obj,&#10;        'query': query,&#10;        'page_obj': page_obj,&#10;        'user_favorites': user_favorites&#10;    })&#10;&#10;@login_required&#10;def book_create(request):&#10;    if request.method == 'POST':&#10;        form = BookForm(request.POST, request.FILES)&#10;        if form.is_valid():&#10;            book = form.save(commit=False)&#10;            book.uploader = request.user&#10;            book.save()&#10;&#10;            # Proses konversi PDF ke gambar jika ada file PDF&#10;            if book.file and book.file.name.endswith('.pdf'):&#10;                try:&#10;                    # Konversi PDF ke gambar&#10;                    pdf_path = book.file.path&#10;                    images_folder = convert_pdf_to_images(pdf_path, book.id)&#10;&#10;                    if images_folder:&#10;                        book.images_folder = images_folder&#10;&#10;                    # Dapatkan jumlah halaman&#10;                    page_count = get_book_page_count(pdf_path)&#10;                    if page_count &gt; 0:&#10;                        book.pages = page_count&#10;&#10;                    # Generate cover dari halaman pertama PDF&#10;                    if not book.cover:&#10;                        cover_path = get_book_cover_from_pdf(pdf_path, book.id)&#10;                        if cover_path:&#10;                            book.cover = cover_path&#10;&#10;                    # Analisis otomatis untuk mendapatkan kata-kata relevan&#10;                    try:&#10;                        from .utils import analyze_book_text&#10;                        keywords = analyze_book_text(pdf_path, max_keywords=5)&#10;                        if keywords:&#10;                            book.keywords = ', '.join(keywords)&#10;                    except Exception as e:&#10;                        pass&#10;&#10;                    book.save()&#10;&#10;                except Exception as e:&#10;                    pass&#10;&#10;            # Redirect dengan parameter notifikasi&#10;            return redirect(f'/library/?uploaded={book.title}')&#10;    else:&#10;        form = BookForm()&#10;    return render(request, 'library/book_form.html', {'form': form, 'title': 'Upload Buku'})&#10;&#10;&#10;@login_required&#10;def book_update(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;    # cek user atau staff&#10;    if not (request.user.is_staff or book.uploader == request.user):&#10;        messages.error(request, &quot;Kamu tidak memiliki izin untuk mengedit buku ini.&quot;)&#10;        return redirect('book_list')&#10;&#10;    if request.method == 'POST':&#10;        from .forms import BookEditForm&#10;        form = BookEditForm(request.POST, request.FILES, instance=book)&#10;        if form.is_valid():&#10;            # Simpan data lama untuk perbandingan&#10;            old_file = book.file&#10;&#10;            # Simpan form&#10;            updated_book = form.save()&#10;&#10;            # Cek apakah file PDF berubah&#10;            if 'file' in request.FILES and request.FILES['file'] != old_file:&#10;                # File berubah, perlu diproses ulang&#10;                # Hapus folder gambar lama jika ada&#10;                if updated_book.images_folder:&#10;                    import shutil&#10;                    import os&#10;                    from django.conf import settings&#10;&#10;                    old_folder_path = os.path.join(settings.MEDIA_ROOT, updated_book.images_folder)&#10;                    if os.path.exists(old_folder_path):&#10;                        shutil.rmtree(old_folder_path)&#10;&#10;                # Reset data terkait pemrosesan&#10;                updated_book.images_folder = None&#10;                updated_book.pages = None&#10;                updated_book.cover = None&#10;                updated_book.keywords = None&#10;                updated_book.save()&#10;&#10;                # Proses file PDF baru menggunakan fungsi yang tersedia&#10;                try:&#10;                    pdf_path = updated_book.file.path&#10;&#10;                    # Konversi PDF ke gambar&#10;                    images_folder = convert_pdf_to_images(pdf_path, updated_book.id)&#10;                    if images_folder:&#10;                        updated_book.images_folder = images_folder&#10;&#10;                    # Dapatkan jumlah halaman&#10;                    page_count = get_book_page_count(pdf_path)&#10;                    if page_count &gt; 0:&#10;                        updated_book.pages = page_count&#10;&#10;                    # Generate cover dari halaman pertama PDF&#10;                    cover_path = get_book_cover_from_pdf(pdf_path, updated_book.id)&#10;                    if cover_path:&#10;                        updated_book.cover = cover_path&#10;&#10;                    # Analisis otomatis untuk mendapatkan kata-kata relevan&#10;                    try:&#10;                        from .utils import analyze_book_text&#10;                        keywords = analyze_book_text(pdf_path, max_keywords=5)&#10;                        if keywords:&#10;                            updated_book.keywords = ', '.join(keywords)&#10;                    except Exception as e:&#10;                        pass&#10;&#10;                    updated_book.save()&#10;&#10;                except Exception as e:&#10;                    pass&#10;&#10;            # Redirect dengan parameter notifikasi&#10;            return redirect(f'/library/?edited={updated_book.title}')&#10;    else:&#10;        from .forms import BookEditForm&#10;        form = BookEditForm(instance=book)&#10;&#10;    return render(request, 'library/book_form.html', {&#10;        'form': form,&#10;        'title': 'Edit Buku',&#10;        'book': book,&#10;        'is_edit': True&#10;    })&#10;&#10;&#10;@login_required&#10;def book_delete(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;    if not (request.user.is_staff or book.uploader == request.user):&#10;        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':&#10;            return JsonResponse({'success': False, 'message': 'Kamu tidak memiliki izin untuk menghapus buku ini.'})&#10;        messages.error(request, &quot;Kamu tidak memiliki izin untuk menghapus buku ini.&quot;)&#10;        return redirect('book_list')&#10;&#10;    if request.method == 'POST' or request.method == 'DELETE':&#10;        try:&#10;            book_title = book.title&#10;            book.delete()&#10;&#10;            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':&#10;                return JsonResponse({'success': True, 'message': f'Buku &quot;{book_title}&quot; berhasil dihapus.'})&#10;&#10;            messages.success(request, f'Buku &quot;{book_title}&quot; berhasil dihapus.')&#10;            return redirect('book_list')&#10;        except Exception as e:&#10;            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':&#10;                return JsonResponse({'success': False, 'message': 'Terjadi kesalahan saat menghapus buku.'})&#10;&#10;            messages.error(request, 'Terjadi kesalahan saat menghapus buku.')&#10;            return redirect('book_detail', pk=pk)&#10;&#10;    # Jika GET request (untuk form konfirmasi)&#10;    return render(request, 'library/book_confirm_delete.html', {'book': book})&#10;&#10;def book_detail(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;    # Check apakah buku ini sudah difavoritkan oleh user&#10;    is_favorited = False&#10;    if request.user.is_authenticated:&#10;        from .models import Favorite&#10;        is_favorited = Favorite.objects.filter(user=request.user, book=book).exists()&#10;&#10;    return render(request, 'library/book_detail.html', {&#10;        'book': book,&#10;        'is_favorited': is_favorited&#10;    })&#10;&#10;def book_preview(request, pk):&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    # Pastikan buku memiliki images folder&#10;    if not book.images_folder:&#10;        messages.error(request, &quot;Buku ini belum dikonversi ke gambar.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    # Get page number dari URL parameter&#10;    page_num = request.GET.get('page', 1)&#10;    try:&#10;        page_num = int(page_num)&#10;    except ValueError:&#10;        page_num = 1&#10;&#10;    # Pastikan page number valid&#10;    if page_num &lt; 1:&#10;        page_num = 1&#10;    elif book.pages and page_num &gt; book.pages:&#10;        page_num = book.pages&#10;&#10;    # Buat path ke gambar halaman&#10;    image_filename = f&quot;page_{page_num:03d}.png&quot;&#10;    image_path = f&quot;{book.images_folder}/{image_filename}&quot;&#10;&#10;    # Check apakah file gambar ada&#10;    full_image_path = os.path.join(settings.MEDIA_ROOT, image_path)&#10;    if not os.path.exists(full_image_path):&#10;        messages.error(request, f&quot;Halaman {page_num} tidak ditemukan.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    context = {&#10;        'book': book,&#10;        'current_page': page_num,&#10;        'total_pages': book.pages or 1,&#10;        'image_url': f&quot;{settings.MEDIA_URL}{image_path}&quot;,&#10;        'has_previous': page_num &gt; 1,&#10;        'has_next': page_num &lt; (book.pages or 1),&#10;        'previous_page': page_num - 1 if page_num &gt; 1 else None,&#10;        'next_page': page_num + 1 if page_num &lt; (book.pages or 1) else None,&#10;    }&#10;&#10;    return render(request, 'library/book_preview.html', context)&#10;&#10;@login_required&#10;@require_http_methods([&quot;POST&quot;])&#10;def toggle_favorite(request, pk):&#10;    &quot;&quot;&quot;Toggle favorite status untuk buku via AJAX&quot;&quot;&quot;&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    try:&#10;        # Coba cari existing favorite&#10;        favorite = Favorite.objects.get(user=request.user, book=book)&#10;        # Jika ada, hapus (unfavorite)&#10;        favorite.delete()&#10;        is_favorited = False&#10;        message = &quot;Buku dihapus dari favorit&quot;&#10;    except Favorite.DoesNotExist:&#10;        # Jika tidak ada, tambah (favorite)&#10;        Favorite.objects.create(user=request.user, book=book)&#10;        is_favorited = True&#10;        message = &quot;Buku ditambahkan ke favorit&quot;&#10;&#10;    # Return JSON response untuk AJAX&#10;    return JsonResponse({&#10;        'success': True,&#10;        'is_favorited': is_favorited,&#10;        'message': message,&#10;        'favorites_count': request.user.favorite_set.count()&#10;    })&#10;&#10;@login_required&#10;def reprocess_book(request, pk):&#10;    &quot;&quot;&quot;&#10;    Konversi ulang buku yang belum memiliki gambar&#10;    &quot;&quot;&quot;&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    # Cek permission&#10;    if not (request.user.is_staff or book.uploader == request.user):&#10;        messages.error(request, &quot;Kamu tidak memiliki izin untuk memproses ulang buku ini.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    # Proses konversi PDF ke gambar jika ada file PDF&#10;    if book.file and book.file.name.endswith('.pdf'):&#10;        try:&#10;            # Konversi PDF ke gambar&#10;            pdf_path = book.file.path&#10;            images_folder = convert_pdf_to_images(pdf_path, book.id)&#10;&#10;            if images_folder:&#10;                book.images_folder = images_folder&#10;&#10;            # Dapatkan jumlah halaman&#10;            page_count = get_book_page_count(pdf_path)&#10;            if page_count &gt; 0:&#10;                book.pages = page_count&#10;&#10;            # Generate cover dari halaman pertama PDF jika belum ada cover&#10;            if not book.cover:&#10;                cover_path = get_book_cover_from_pdf(pdf_path, book.id)&#10;                if cover_path:&#10;                    book.cover = cover_path&#10;&#10;            # Analisis otomatis jika belum ada keywords&#10;            if not book.keywords:&#10;                try:&#10;                    from .utils import analyze_book_text&#10;                    keywords = analyze_book_text(pdf_path, max_keywords=5)  # Batasi jadi 5 kata&#10;                    if keywords:&#10;                        book.keywords = ', '.join(keywords)&#10;                        print(f&quot;Debug: Auto-analysis completed during reprocess. Keywords: {book.keywords}&quot;)&#10;                except Exception as e:&#10;                    print(f&quot;Debug: Auto-analysis failed during reprocess: {str(e)}&quot;)&#10;&#10;            book.save()&#10;&#10;            success_msg = f'Buku berhasil diproses ulang ({page_count} halaman)'&#10;            if book.keywords:&#10;                success_msg += ' dengan kata kunci relevan'&#10;            messages.success(request, success_msg)&#10;&#10;        except Exception as e:&#10;            messages.error(request, f'Proses ulang buku gagal: {str(e)}')&#10;    else:&#10;        messages.error(request, 'File buku bukan PDF atau tidak ditemukan.')&#10;&#10;    return redirect('book_detail', pk=pk)&#10;&#10;@login_required&#10;def analyze_book(request, pk):&#10;    &quot;&quot;&quot;&#10;    Analisis teks buku untuk mendapatkan kata-kata relevan&#10;    &quot;&quot;&quot;&#10;    book = get_object_or_404(Book, pk=pk)&#10;&#10;    # Cek permission - hanya user yang login bisa menganalisis&#10;    if not request.user.is_authenticated:&#10;        if request.headers.get('Content-Type') == 'application/json':&#10;            return JsonResponse({'success': False, 'message': 'Anda harus login untuk menganalisis buku.'})&#10;        messages.error(request, &quot;Anda harus login untuk menganalisis buku.&quot;)&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    # Pastikan ada file PDF&#10;    if not (book.file and book.file.name.endswith('.pdf')):&#10;        if request.headers.get('Content-Type') == 'application/json':&#10;            return JsonResponse({'success': False, 'message': 'File buku bukan PDF atau tidak ditemukan.'})&#10;        messages.error(request, 'File buku bukan PDF atau tidak ditemukan.')&#10;        return redirect('book_detail', pk=pk)&#10;&#10;    try:&#10;        # Import fungsi analisis&#10;        from .utils import analyze_book_text&#10;&#10;        # Analisis teks dari PDF&#10;        pdf_path = book.file.path&#10;        keywords = analyze_book_text(pdf_path, max_keywords=5)  # Batasi jadi 5 kata&#10;&#10;        if keywords:&#10;            # Simpan keywords ke database&#10;            book.keywords = ', '.join(keywords)&#10;            book.save()&#10;&#10;            # Return JSON response untuk AJAX request&#10;            if request.headers.get('Content-Type') == 'application/json':&#10;                return JsonResponse({&#10;                    'success': True,&#10;                    'message': f'Analisis berhasil! Ditemukan {len(keywords)} kata kunci relevan.',&#10;                    'keywords': keywords,&#10;                    'keywords_string': book.keywords&#10;                })&#10;&#10;            messages.success(request, f'Analisis berhasil! Ditemukan {len(keywords)} kata kunci relevan.')&#10;        else:&#10;            if request.headers.get('Content-Type') == 'application/json':&#10;                return JsonResponse({&#10;                    'success': False,&#10;                    'message': 'Tidak dapat mengekstrak kata kunci dari buku ini. Mungkin teks tidak dapat dibaca atau terlalu sedikit.'&#10;                })&#10;            messages.warning(request, 'Tidak dapat mengekstrak kata kunci dari buku ini. Mungkin teks tidak dapat dibaca atau terlalu sedikit.')&#10;&#10;    except Exception as e:&#10;        error_msg = f'Analisis gagal: {str(e)}'&#10;        print(f&quot;Debug: Analysis error = {str(e)}&quot;)&#10;&#10;        if request.headers.get('Content-Type') == 'application/json':&#10;            return JsonResponse({'success': False, 'message': error_msg})&#10;        messages.error(request, error_msg)&#10;&#10;    return redirect('book_detail', pk=pk)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/library/book_list.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/library/book_list.html" />
              <option name="originalContent" value="{% extends 'base.html' %}&#10;{% block title %}Daftar Buku{% endblock %}&#10;{% block content %}&#10;&#10;&lt;h2&gt;Daftar Buku&lt;/h2&gt;&#10;&#10;&lt;!-- Filter Section --&gt;&#10;&lt;div class=&quot;row mb-3&quot;&gt;&#10;    &lt;div class=&quot;col-md-6&quot;&gt;&#10;        &lt;form method=&quot;get&quot; class=&quot;d-flex&quot;&gt;&#10;            &lt;select name=&quot;genre&quot; class=&quot;form-select me-2&quot; onchange=&quot;this.form.submit()&quot;&gt;&#10;                &lt;option value=&quot;&quot;&gt;Semua Genre&lt;/option&gt;&#10;                &lt;option value=&quot;fiksi&quot; {% if request.GET.genre == 'fiksi' %}selected{% endif %}&gt;Fiksi&lt;/option&gt;&#10;                &lt;option value=&quot;komik&quot; {% if request.GET.genre == 'komik' %}selected{% endif %}&gt;Komik&lt;/option&gt;&#10;                &lt;option value=&quot;motivasi&quot; {% if request.GET.genre == 'motivasi' %}selected{% endif %}&gt;Motivasi&lt;/option&gt;&#10;            &lt;/select&gt;&#10;            &lt;select name=&quot;favorite&quot; class=&quot;form-select&quot; onchange=&quot;this.form.submit()&quot;&gt;&#10;                &lt;option value=&quot;0&quot; {% if request.GET.favorite == '0' %}selected{% endif %}&gt;Semua Buku&lt;/option&gt;&#10;                &lt;option value=&quot;1&quot; {% if request.GET.favorite == '1' %}selected{% endif %}&gt;Favorit Saja&lt;/option&gt;&#10;            &lt;/select&gt;&#10;            {% if query %}&lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;{{ query }}&quot;&gt;{% endif %}&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;table-responsive&quot;&gt;&#10;    &lt;table class=&quot;table table-striped&quot;&gt;&#10;        &lt;thead&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;&lt;/th&gt;&#10;                &lt;th&gt;&lt;/th&gt;&#10;                &lt;th&gt;Judul&lt;/th&gt;&#10;                &lt;th&gt;Penulis&lt;/th&gt;&#10;                &lt;th&gt;Genre&lt;/th&gt;&#10;                &lt;th&gt;Tahun&lt;/th&gt;&#10;                &lt;th&gt;Deskripsi&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for book in books %}&#10;            &lt;tr class=&quot;book-row&quot; data-book-id=&quot;{{ book.id }}&quot; style=&quot;cursor: pointer;&quot;&#10;                title=&quot;Klik untuk detail buku&quot;&gt;&#10;                            &lt;td class=&quot;text-center align-middle&quot;&gt;&#10;                    {% if user.is_authenticated %}&#10;                    &lt;button class=&quot;btn btn-sm btn-outline-warning favorite-btn&quot;&#10;                            data-book-id=&quot;{{ book.id }}&quot;&#10;                            onclick=&quot;event.stopPropagation();&quot;&#10;                            title=&quot;Toggle Favorit&quot;&gt;&#10;                        &lt;i class=&quot;bi bi-star{% if book.id in user_favorites %}-fill{% endif %}&quot; id=&quot;star-{{ book.id }}&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                    {% endif %}&#10;                &lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;div class=&quot;book-cover-container&quot;&gt;&#10;                        {% if book.cover %}&#10;                            &lt;img src=&quot;{{ book.cover.url }}&quot; class=&quot;img-thumbnail&quot;&gt;&#10;                        {% else %}&#10;                            &lt;div class=&quot;no-cover&quot;&gt;&#10;                                &lt;small class=&quot;text-muted&quot;&gt;No Cover&lt;/small&gt;&#10;                            &lt;/div&gt;&#10;                        {% endif %}&#10;                    &lt;/div&gt;&#10;                &lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;div class=&quot;book-title&quot;&gt;&#10;                        &lt;strong&gt;{{ book.title }}&lt;/strong&gt;&#10;                    &lt;/div&gt;&#10;                    {% if book.pages %}&#10;                        &lt;br&gt;&lt;small class=&quot;text-muted&quot;&gt;{{ book.pages }} halaman&lt;/small&gt;&#10;                    {% endif %}&#10;                    {% if not book.images_folder %}&#10;                        &lt;br&gt;&lt;small class=&quot;text-warning&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-exclamation-triangle&quot;&gt;&lt;/i&gt; Perlu diproses&#10;                        &lt;/small&gt;&#10;                    {% endif %}&#10;                &lt;/td&gt;&#10;                &lt;td&gt;{{ book.author|default:&quot;-&quot; }}&lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;span class=&quot;badge bg-secondary&quot;&gt;{{ book.get_genre_display }}&lt;/span&gt;&#10;                &lt;/td&gt;&#10;                &lt;td&gt;{{ book.year|default:&quot;-&quot; }}&lt;/td&gt;&#10;                &lt;td&gt;&#10;                    {% if book.description %}&#10;                        {{ book.description|truncatewords:10 }}&#10;                    {% else %}&#10;                        &lt;span class=&quot;text-muted&quot;&gt;Tidak ada deskripsi&lt;/span&gt;&#10;                    {% endif %}&#10;                &lt;/td&gt;&#10;&#10;            &lt;/tr&gt;&#10;            {% empty %}&#10;            &lt;tr&gt;&#10;                &lt;td colspan=&quot;7&quot; class=&quot;text-center&quot;&gt;Tidak ada buku ditemukan&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Pagination --&gt;&#10;{% if page_obj.has_other_pages %}&#10;&lt;nav aria-label=&quot;Page navigation&quot;&gt;&#10;    &lt;ul class=&quot;pagination justify-content-center&quot;&gt;&#10;        &lt;!-- First button --&gt;&#10;        {% if page_obj.has_previous %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page=1{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    First&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;First&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;&#10;        &lt;!-- Previous button --&gt;&#10;        {% if page_obj.has_previous %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page={{ page_obj.previous_page_number }}{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    Prev&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;Prev&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;&#10;        &lt;!-- Current page info --&gt;&#10;        &lt;li class=&quot;page-item disabled&quot;&gt;&#10;            &lt;span class=&quot;page-link&quot; style=&quot;background-color: #30475E; border-color: #30475E; color: white;&quot;&gt;{{ page_obj.number }} / {{ page_obj.paginator.num_pages }}&lt;/span&gt;&#10;        &lt;/li&gt;&#10;&#10;        &lt;!-- Next button --&gt;&#10;        {% if page_obj.has_next %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page={{ page_obj.next_page_number }}{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    Next&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;Next&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;&#10;        &lt;!-- Last button --&gt;&#10;        {% if page_obj.has_next %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page={{ page_obj.paginator.num_pages }}{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    Last&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;Last&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;    &lt;/ul&gt;&#10;&lt;/nav&gt;&#10;&#10;&lt;!-- Pagination info --&gt;&#10;&lt;div class=&quot;text-center mt-3&quot;&gt;&#10;    &lt;small class=&quot;text-muted&quot;&gt;&#10;        Halaman {{ page_obj.number }} dari {{ page_obj.paginator.num_pages }}&#10;        ({{ page_obj.paginator.count }} total buku)&#10;    &lt;/small&gt;&#10;&lt;/div&gt;&#10;{% endif %}&#10;&#10;&lt;style&gt;&#10;.book-row:hover {&#10;    background-color: #f8f9fa !important;&#10;    transform: translateY(-1px);&#10;    box-shadow: 0 2px 4px rgba(0,0,0,0.1);&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.toast-notification {&#10;    transition: opacity 0.5s ease;&#10;}&#10;&#10;/* Pagination hover effects */&#10;.pagination .page-link:hover {&#10;    background-color: #F05454 !important;&#10;    border-color: #F05454 !important;&#10;    color: white !important;&#10;}&#10;&#10;/* Ukuran cover buku dalam tabel */&#10;.book-cover-container {&#10;    width: 50px;&#10;    height: 70px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    overflow: hidden;&#10;}&#10;&#10;.book-cover-container img {&#10;    width: 50px;&#10;    height: 70px;&#10;    object-fit: cover;&#10;    border-radius: 4px;&#10;}&#10;&#10;.book-cover-container .no-cover {&#10;    width: 50px;&#10;    height: 70px;&#10;    background-color: #f8f9fa;&#10;    border: 1px solid #dee2e6;&#10;    border-radius: 4px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    font-size: 10px;&#10;    text-align: center;&#10;    color: #6c757d;&#10;}&#10;&#10;/* Membatasi tinggi cell */&#10;.book-row td {&#10;    vertical-align: middle;&#10;    max-height: 80px;&#10;    padding: 12px 8px;&#10;}&#10;&#10;/* Membatasi panjang teks judul */&#10;.book-title {&#10;    max-width: 200px;&#10;    overflow: hidden;&#10;}&#10;&#10;.book-title strong {&#10;    display: block;&#10;    white-space: nowrap;&#10;    overflow: hidden;&#10;    text-overflow: ellipsis;&#10;    max-width: 100%;&#10;}&#10;&lt;/style&gt;&#10;&#10;&lt;script&gt;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Handle klik pada baris buku&#10;    const bookRows = document.querySelectorAll('.book-row');&#10;&#10;    bookRows.forEach(row =&gt; {&#10;        row.addEventListener('click', function() {&#10;            const bookId = this.getAttribute('data-book-id');&#10;            // Ambil parameter halaman saat ini dan filter&#10;            const urlParams = new URLSearchParams(window.location.search);&#10;            const currentPage = urlParams.get('page') || '1';&#10;            const genre = urlParams.get('genre') || '';&#10;            const favorite = urlParams.get('favorite') || '';&#10;            const query = urlParams.get('q') || '';&#10;&#10;            // Buat URL dengan menyertakan informasi pagination&#10;            let detailUrl = `/library/${bookId}/?page=${currentPage}`;&#10;            if (genre) detailUrl += `&amp;genre=${encodeURIComponent(genre)}`;&#10;            if (favorite) detailUrl += `&amp;favorite=${encodeURIComponent(favorite)}`;&#10;            if (query) detailUrl += `&amp;q=${encodeURIComponent(query)}`;&#10;&#10;            // Arahkan ke halaman detail buku dengan parameter pagination&#10;            window.location.href = detailUrl;&#10;        });&#10;    });&#10;&#10;    // Handle favorit button dengan AJAX&#10;    const favoriteButtons = document.querySelectorAll('.favorite-btn');&#10;    favoriteButtons.forEach(btn =&gt; {&#10;        btn.addEventListener('click', function(e) {&#10;            e.stopPropagation();&#10;&#10;            const bookId = this.getAttribute('data-book-id');&#10;            const starIcon = document.getElementById(`star-${bookId}`);&#10;            const button = this;&#10;&#10;            // Disable button sementara&#10;            button.disabled = true;&#10;&#10;            // Kirim AJAX request&#10;            fetch(`/library/${bookId}/toggle-favorite/`, {&#10;                method: 'POST',&#10;                headers: {&#10;                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                credentials: 'same-origin'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    // Update star icon&#10;                    if (data.is_favorited) {&#10;                        starIcon.className = 'bi bi-star-fill';&#10;                        button.title = 'Hapus dari favorit';&#10;                    } else {&#10;                        starIcon.className = 'bi bi-star';&#10;                        button.title = 'Tambah ke favorit';&#10;                    }&#10;&#10;                    // Show toast notification&#10;                    showToast(data.message, 'success');&#10;                } else {&#10;                    showToast('Gagal mengubah status favorit', 'error');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error:', error);&#10;                showToast('Terjadi kesalahan', 'error');&#10;            })&#10;            .finally(() =&gt; {&#10;                // Re-enable button&#10;                button.disabled = false;&#10;            });&#10;        });&#10;    });&#10;});&#10;&#10;// Function untuk menampilkan toast notification&#10;function showToast(message, type = 'info') {&#10;    // Create toast element&#10;    const toast = document.createElement('div');&#10;    toast.className = `toast-notification position-fixed fade show`;&#10;    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; padding: 15px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);';&#10;&#10;    // Set background and text color based on type&#10;    if (type === 'success') {&#10;        toast.style.backgroundColor = '#30475E'; // blue-gray&#10;        toast.style.color = 'white';&#10;        toast.style.border = '1px solid #30475E';&#10;    } else {&#10;        toast.style.backgroundColor = '#F05454'; // red-accent&#10;        toast.style.color = 'white';&#10;        toast.style.border = '1px solid #F05454';&#10;    }&#10;&#10;    toast.innerHTML = `&#10;        &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;            &lt;span&gt;${message}&lt;/span&gt;&#10;            &lt;button type=&quot;button&quot; class=&quot;btn-close btn-close-white ms-3&quot; onclick=&quot;this.parentElement.parentElement.remove()&quot;&gt;&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    `;&#10;&#10;    // Add to body&#10;    document.body.appendChild(toast);&#10;&#10;    // Auto remove after 3 seconds&#10;    setTimeout(() =&gt; {&#10;        if (toast.parentNode) {&#10;            toast.remove();&#10;        }&#10;    }, 3000);&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;!-- Add CSRF token for AJAX --&gt;&#10;{% csrf_token %}&#10;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;{% block title %}Daftar Buku{% endblock %}&#10;{% block content %}&#10;&#10;&lt;h2&gt;Daftar Buku&lt;/h2&gt;&#10;&#10;&lt;!-- Filter Section --&gt;&#10;&lt;div class=&quot;row mb-3&quot;&gt;&#10;    &lt;div class=&quot;col-md-6&quot;&gt;&#10;        &lt;form method=&quot;get&quot; class=&quot;d-flex&quot;&gt;&#10;            &lt;select name=&quot;genre&quot; class=&quot;form-select me-2&quot; onchange=&quot;this.form.submit()&quot;&gt;&#10;                &lt;option value=&quot;&quot;&gt;Semua Genre&lt;/option&gt;&#10;                &lt;option value=&quot;fiksi&quot; {% if request.GET.genre == 'fiksi' %}selected{% endif %}&gt;Fiksi&lt;/option&gt;&#10;                &lt;option value=&quot;komik&quot; {% if request.GET.genre == 'komik' %}selected{% endif %}&gt;Komik&lt;/option&gt;&#10;                &lt;option value=&quot;motivasi&quot; {% if request.GET.genre == 'motivasi' %}selected{% endif %}&gt;Motivasi&lt;/option&gt;&#10;            &lt;/select&gt;&#10;            &lt;select name=&quot;favorite&quot; class=&quot;form-select&quot; onchange=&quot;this.form.submit()&quot;&gt;&#10;                &lt;option value=&quot;0&quot; {% if request.GET.favorite == '0' %}selected{% endif %}&gt;Semua Buku&lt;/option&gt;&#10;                &lt;option value=&quot;1&quot; {% if request.GET.favorite == '1' %}selected{% endif %}&gt;Favorit Saja&lt;/option&gt;&#10;            &lt;/select&gt;&#10;            {% if query %}&lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;{{ query }}&quot;&gt;{% endif %}&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;table-responsive&quot;&gt;&#10;    &lt;table class=&quot;table table-striped&quot;&gt;&#10;        &lt;thead&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;&lt;/th&gt;&#10;                &lt;th&gt;&lt;/th&gt;&#10;                &lt;th&gt;Judul&lt;/th&gt;&#10;                &lt;th&gt;Penulis&lt;/th&gt;&#10;                &lt;th&gt;Genre&lt;/th&gt;&#10;                &lt;th&gt;Tahun&lt;/th&gt;&#10;                &lt;th&gt;Deskripsi&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;            {% for book in books %}&#10;            &lt;tr class=&quot;book-row&quot; data-book-id=&quot;{{ book.id }}&quot; style=&quot;cursor: pointer;&quot;&#10;                title=&quot;Klik untuk detail buku&quot;&gt;&#10;                            &lt;td class=&quot;text-center align-middle&quot;&gt;&#10;                    {% if user.is_authenticated %}&#10;                    &lt;button class=&quot;btn btn-sm btn-outline-warning favorite-btn&quot;&#10;                            data-book-id=&quot;{{ book.id }}&quot;&#10;                            onclick=&quot;event.stopPropagation();&quot;&#10;                            title=&quot;Toggle Favorit&quot;&gt;&#10;                        &lt;i class=&quot;bi bi-star{% if book.id in user_favorites %}-fill{% endif %}&quot; id=&quot;star-{{ book.id }}&quot;&gt;&lt;/i&gt;&#10;                    &lt;/button&gt;&#10;                    {% endif %}&#10;                &lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;div class=&quot;book-cover-container&quot;&gt;&#10;                        {% if book.cover %}&#10;                            &lt;img src=&quot;{{ book.cover.url }}&quot; class=&quot;img-thumbnail&quot;&gt;&#10;                        {% else %}&#10;                            &lt;div class=&quot;no-cover&quot;&gt;&#10;                                &lt;small class=&quot;text-muted&quot;&gt;No Cover&lt;/small&gt;&#10;                            &lt;/div&gt;&#10;                        {% endif %}&#10;                    &lt;/div&gt;&#10;                &lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;div class=&quot;book-title&quot;&gt;&#10;                        &lt;strong&gt;{{ book.title }}&lt;/strong&gt;&#10;                    &lt;/div&gt;&#10;                    {% if book.pages %}&#10;                        &lt;br&gt;&lt;small class=&quot;text-muted&quot;&gt;{{ book.pages }} halaman&lt;/small&gt;&#10;                    {% endif %}&#10;                    {% if not book.images_folder %}&#10;                        &lt;br&gt;&lt;small class=&quot;text-warning&quot;&gt;&#10;                            &lt;i class=&quot;bi bi-exclamation-triangle&quot;&gt;&lt;/i&gt; Perlu diproses&#10;                        &lt;/small&gt;&#10;                    {% endif %}&#10;                &lt;/td&gt;&#10;                &lt;td&gt;{{ book.author|default:&quot;-&quot; }}&lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;span class=&quot;badge bg-secondary&quot;&gt;{{ book.get_genre_display }}&lt;/span&gt;&#10;                &lt;/td&gt;&#10;                &lt;td&gt;{{ book.year|default:&quot;-&quot; }}&lt;/td&gt;&#10;                &lt;td&gt;&#10;                    {% if book.description %}&#10;                        {{ book.description|truncatewords:10 }}&#10;                    {% else %}&#10;                        &lt;span class=&quot;text-muted&quot;&gt;Tidak ada deskripsi&lt;/span&gt;&#10;                    {% endif %}&#10;                &lt;/td&gt;&#10;&#10;            &lt;/tr&gt;&#10;            {% empty %}&#10;            &lt;tr&gt;&#10;                &lt;td colspan=&quot;7&quot; class=&quot;text-center&quot;&gt;Tidak ada buku ditemukan&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Pagination --&gt;&#10;{% if page_obj.has_other_pages %}&#10;&lt;nav aria-label=&quot;Page navigation&quot;&gt;&#10;    &lt;ul class=&quot;pagination justify-content-center&quot;&gt;&#10;        &lt;!-- First button --&gt;&#10;        {% if page_obj.has_previous %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page=1{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    First&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;First&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;&#10;        &lt;!-- Previous button --&gt;&#10;        {% if page_obj.has_previous %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page={{ page_obj.previous_page_number }}{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    Prev&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;Prev&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;&#10;        &lt;!-- Current page info --&gt;&#10;        &lt;li class=&quot;page-item disabled&quot;&gt;&#10;            &lt;span class=&quot;page-link&quot; style=&quot;background-color: #30475E; border-color: #30475E; color: white;&quot;&gt;{{ page_obj.number }} / {{ page_obj.paginator.num_pages }}&lt;/span&gt;&#10;        &lt;/li&gt;&#10;&#10;        &lt;!-- Next button --&gt;&#10;        {% if page_obj.has_next %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page={{ page_obj.next_page_number }}{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    Next&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;Next&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;&#10;        &lt;!-- Last button --&gt;&#10;        {% if page_obj.has_next %}&#10;            &lt;li class=&quot;page-item&quot;&gt;&#10;                &lt;a class=&quot;page-link&quot; href=&quot;?page={{ page_obj.paginator.num_pages }}{% if query %}&amp;q={{ query }}{% endif %}{% if request.GET.genre %}&amp;genre={{ request.GET.genre }}{% endif %}{% if request.GET.favorite %}&amp;favorite={{ request.GET.favorite }}{% endif %}&quot;&gt;&#10;                    Last&#10;                &lt;/a&gt;&#10;            &lt;/li&gt;&#10;        {% else %}&#10;            &lt;li class=&quot;page-item disabled&quot;&gt;&#10;                &lt;span class=&quot;page-link&quot;&gt;Last&lt;/span&gt;&#10;            &lt;/li&gt;&#10;        {% endif %}&#10;    &lt;/ul&gt;&#10;&lt;/nav&gt;&#10;&#10;&lt;!-- Pagination info --&gt;&#10;&lt;div class=&quot;text-center mt-3&quot;&gt;&#10;    &lt;small class=&quot;text-muted&quot;&gt;&#10;        Halaman {{ page_obj.number }} dari {{ page_obj.paginator.num_pages }}&#10;        ({{ page_obj.paginator.count }} total buku)&#10;    &lt;/small&gt;&#10;&lt;/div&gt;&#10;{% endif %}&#10;&#10;&lt;style&gt;&#10;.book-row:hover {&#10;    background-color: #f8f9fa !important;&#10;    transform: translateY(-1px);&#10;    box-shadow: 0 2px 4px rgba(0,0,0,0.1);&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.toast-notification {&#10;    transition: opacity 0.5s ease;&#10;}&#10;&#10;/* Pagination hover effects */&#10;.pagination .page-link:hover {&#10;    background-color: #F05454 !important;&#10;    border-color: #F05454 !important;&#10;    color: white !important;&#10;}&#10;&#10;/* Ukuran cover buku dalam tabel */&#10;.book-cover-container {&#10;    width: 50px;&#10;    height: 70px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    overflow: hidden;&#10;}&#10;&#10;.book-cover-container img {&#10;    width: 50px;&#10;    height: 70px;&#10;    object-fit: cover;&#10;    border-radius: 4px;&#10;}&#10;&#10;.book-cover-container .no-cover {&#10;    width: 50px;&#10;    height: 70px;&#10;    background-color: #f8f9fa;&#10;    border: 1px solid #dee2e6;&#10;    border-radius: 4px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    font-size: 10px;&#10;    text-align: center;&#10;    color: #6c757d;&#10;}&#10;&#10;/* Membatasi tinggi cell */&#10;.book-row td {&#10;    vertical-align: middle;&#10;    max-height: 80px;&#10;    padding: 12px 8px;&#10;}&#10;&#10;/* Membatasi panjang teks judul */&#10;.book-title {&#10;    max-width: 200px;&#10;    overflow: hidden;&#10;}&#10;&#10;.book-title strong {&#10;    display: block;&#10;    white-space: nowrap;&#10;    overflow: hidden;&#10;    text-overflow: ellipsis;&#10;    max-width: 100%;&#10;}&#10;&lt;/style&gt;&#10;&#10;&lt;script&gt;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Cek URL parameters untuk notifikasi&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    &#10;    // Notifikasi upload buku&#10;    if (urlParams.has('uploaded')) {&#10;        const bookTitle = urlParams.get('uploaded');&#10;        showToast(`Buku &quot;${bookTitle}&quot; berhasil diupload.`, 'success');&#10;        &#10;        // Hapus parameter dari URL tanpa reload&#10;        const newUrl = window.location.pathname + '?' + &#10;            Array.from(urlParams.entries())&#10;                .filter(([key]) =&gt; key !== 'uploaded')&#10;                .map(([key, value]) =&gt; `${key}=${encodeURIComponent(value)}`)&#10;                .join('&amp;');&#10;        window.history.replaceState({}, '', newUrl.endsWith('?') ? newUrl.slice(0, -1) : newUrl);&#10;    }&#10;    &#10;    // Notifikasi edit buku&#10;    if (urlParams.has('edited')) {&#10;        const bookTitle = urlParams.get('edited');&#10;        showToast(`Buku &quot;${bookTitle}&quot; berhasil diperbarui.`, 'success');&#10;        &#10;        // Hapus parameter dari URL tanpa reload&#10;        const newUrl = window.location.pathname + '?' + &#10;            Array.from(urlParams.entries())&#10;                .filter(([key]) =&gt; key !== 'edited')&#10;                .map(([key, value]) =&gt; `${key}=${encodeURIComponent(value)}`)&#10;                .join('&amp;');&#10;        window.history.replaceState({}, '', newUrl.endsWith('?') ? newUrl.slice(0, -1) : newUrl);&#10;    }&#10;&#10;    // Handle klik pada baris buku&#10;    const bookRows = document.querySelectorAll('.book-row');&#10;&#10;    bookRows.forEach(row =&gt; {&#10;        row.addEventListener('click', function() {&#10;            const bookId = this.getAttribute('data-book-id');&#10;            // Ambil parameter halaman saat ini dan filter&#10;            const urlParams = new URLSearchParams(window.location.search);&#10;            const currentPage = urlParams.get('page') || '1';&#10;            const genre = urlParams.get('genre') || '';&#10;            const favorite = urlParams.get('favorite') || '';&#10;            const query = urlParams.get('q') || '';&#10;&#10;            // Buat URL dengan menyertakan informasi pagination&#10;            let detailUrl = `/library/${bookId}/?page=${currentPage}`;&#10;            if (genre) detailUrl += `&amp;genre=${encodeURIComponent(genre)}`;&#10;            if (favorite) detailUrl += `&amp;favorite=${encodeURIComponent(favorite)}`;&#10;            if (query) detailUrl += `&amp;q=${encodeURIComponent(query)}`;&#10;&#10;            // Arahkan ke halaman detail buku dengan parameter pagination&#10;            window.location.href = detailUrl;&#10;        });&#10;    });&#10;&#10;    // Handle favorit button dengan AJAX&#10;    const favoriteButtons = document.querySelectorAll('.favorite-btn');&#10;    favoriteButtons.forEach(btn =&gt; {&#10;        btn.addEventListener('click', function(e) {&#10;            e.stopPropagation();&#10;&#10;            const bookId = this.getAttribute('data-book-id');&#10;            const starIcon = document.getElementById(`star-${bookId}`);&#10;            const button = this;&#10;&#10;            // Disable button sementara&#10;            button.disabled = true;&#10;&#10;            // Kirim AJAX request&#10;            fetch(`/library/${bookId}/toggle-favorite/`, {&#10;                method: 'POST',&#10;                headers: {&#10;                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                credentials: 'same-origin'&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    // Update star icon&#10;                    if (data.is_favorited) {&#10;                        starIcon.className = 'bi bi-star-fill';&#10;                        button.title = 'Hapus dari favorit';&#10;                    } else {&#10;                        starIcon.className = 'bi bi-star';&#10;                        button.title = 'Tambah ke favorit';&#10;                    }&#10;&#10;                    // Show toast notification&#10;                    showToast(data.message, 'success');&#10;                } else {&#10;                    showToast('Gagal mengubah status favorit', 'error');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error:', error);&#10;                showToast('Terjadi kesalahan', 'error');&#10;            })&#10;            .finally(() =&gt; {&#10;                // Re-enable button&#10;                button.disabled = false;&#10;            });&#10;        });&#10;    });&#10;});&#10;&#10;// Function untuk menampilkan toast notification&#10;function showToast(message, type = 'info') {&#10;    // Create toast element&#10;    const toast = document.createElement('div');&#10;    toast.className = `toast-notification position-fixed fade show`;&#10;    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; padding: 15px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);';&#10;&#10;    // Set background and text color based on type&#10;    if (type === 'success') {&#10;        toast.style.backgroundColor = '#30475E'; // blue-gray&#10;        toast.style.color = 'white';&#10;        toast.style.border = '1px solid #30475E';&#10;    } else {&#10;        toast.style.backgroundColor = '#F05454'; // red-accent&#10;        toast.style.color = 'white';&#10;        toast.style.border = '1px solid #F05454';&#10;    }&#10;&#10;    toast.innerHTML = `&#10;        &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&#10;            &lt;span&gt;${message}&lt;/span&gt;&#10;            &lt;button type=&quot;button&quot; class=&quot;btn-close btn-close-white ms-3&quot; onclick=&quot;this.parentElement.parentElement.remove()&quot;&gt;&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    `;&#10;&#10;    // Add to body&#10;    document.body.appendChild(toast);&#10;&#10;    // Auto remove after 3 seconds&#10;    setTimeout(() =&gt; {&#10;        if (toast.parentNode) {&#10;            toast.remove();&#10;        }&#10;    }, 3000);&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;!-- Add CSRF token for AJAX --&gt;&#10;{% csrf_token %}&#10;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>